import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { Analytics } from "@vercel/analytics/next";

const cormorant = localFont({
  src: [
    {
      path: "../fonts/CormorantSC-Bold.ttf",
      weight: "900",
      style: "bold",
    },
    {
      path: "../fonts/CormorantSC-Regular.ttf",
      weight: "400",
      style: "normal",
    },
  ],
  variable: "--font-cormorant", // f端r Tailwind optional
  display: "swap",
});

const encoded = localFont({
  src: [
    {
      path: "../fonts/EncodeSansExpanded-Thin.ttf",
      weight: "200",
      style: "thin",
    },
    {
      path: "../fonts/EncodeSansExpanded-Regular.ttf",
      weight: "400",
      style: "regular",
    },
    {
      path: "../fonts/EncodeSansExpanded-ExtraBold.ttf",
      weight: "900",
      style: "black",
    },
  ],
  variable: "--font-encoded", // f端r Tailwind optional
  display: "swap",
});

const rocGrotesk = localFont({
  src: [
    {
      path: "../fonts/RocGrotesk_Bold.otf",
      weight: "400",
      style: "regular",
    },
    {
      path: "../fonts/RocGrotesk_Heavy.otf",
      weight: "900",
      style: "bold",
    },
  ],
  variable: "--font-rocGrotesk", // f端r Tailwind optional
  display: "swap",
});

const panther = localFont({
  src: [
    {
      path: "../fonts/panther.ttf",
      weight: "400",
      style: "regular",
    },
  ],
  variable: "--font-panther", // f端r Tailwind optional
  display: "swap",
});

const bstyle = localFont({
  src: "../fonts/BStyle-B.ttf",
  weight: "800",
  style: "bold", // oder "bold", je nach Schriftart
  variable: "--font-bstyle",
  display: "swap",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${cormorant.variable} ${encoded.variable}  ${bstyle.variable} ${panther.variable}  ${rocGrotesk.variable} antialiased`}
      >
        {children}
        <Analytics />
      </body>
    </html>
  );
}
